# This file was generated based on ".graphql-config". Do not edit manually.

schema {
    query: Query
}

type JwtResponse {
    accessToken: String!
    refreshToken: String!
}

type Role {
    id: ID!
    name: String!
}

type User {
    id: ID!
    username: String!
    firstname: String!
    lastname: String!
    email: String!
    roles: [Role]
}

type Category {
    id: ID!
    parentCategory: Category
    name: String!
}

type Image {
    id: ID!
    name: String!
}

type ComputerComponent {
    id: ID!
    companyName: String!
    categories: [Category]!
    images: [Image]!
}

type RelationOrdersToComputerComponents {
    id: ID!
    computerComponent: ComputerComponent
    count: Int
}

type Order {
    id: ID!
    createDate: String!
    relationOrdersToComputerComponents: [RelationOrdersToComputerComponents]!
}

type Customer {
    id: ID!
    address: String!
    telephone: String!
    user: User!
    order: Order!
}

type Publisher {
    id: ID!
    nameCompany: String!
    addressCompany: String!
    activitiesCompany: String!
    positionInCompany: String!
    user: User!
    computerComponents: [ComputerComponent]!
}

input JwtRequest {
    username: String!
    password: String!
}

input JwtRefreshRequest {
    refreshToken: String!
}

input UserInput {
    username: String!
    firstname: String!
    lastname: String!
    email: String!
    password: String!
}

input CustomerInput {
    address: String!
    telephone: String!
    user: UserInput!
}

input PublisherInput {
    nameCompany: String!
    addressCompany: String!
    activitiesCompany: String!
    positionInCompany: String!
    user: UserInput!
}

type Query {
    findAllComputerComponent: [ComputerComponent]!
}

type Mutation {
    login(jwtRequest: JwtRequest!): JwtResponse
    refreshAccessToken(jwtRefreshRequest: JwtRefreshRequest!): JwtResponse

    createUser(user: UserInput!): User
    createCustomer(customer: CustomerInput!): Customer
    createPublisher(publisher: PublisherInput!): Publisher
}
